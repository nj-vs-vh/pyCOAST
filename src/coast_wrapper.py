# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _coast_wrapper
else:
    import _coast_wrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coast_wrapper.delete_SwigPyIterator

    def value(self):
        return _coast_wrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _coast_wrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _coast_wrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _coast_wrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _coast_wrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _coast_wrapper.SwigPyIterator_copy(self)

    def next(self):
        return _coast_wrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _coast_wrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _coast_wrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _coast_wrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _coast_wrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _coast_wrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _coast_wrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _coast_wrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _coast_wrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _coast_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _coast_wrapper:
_coast_wrapper.SwigPyIterator_swigregister(SwigPyIterator)

class TCorsikaReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.TCorsikaReader_swiginit(self, _coast_wrapper.new_TCorsikaReader(*args))
    __swig_destroy__ = _coast_wrapper.delete_TCorsikaReader

    def Read(self):
        return _coast_wrapper.TCorsikaReader_Read(self)

    def InterruptReader(self):
        return _coast_wrapper.TCorsikaReader_InterruptReader(self)

    def Rewind(self):
        return _coast_wrapper.TCorsikaReader_Rewind(self)

    def HandleSubBlock(self, sb):
        return _coast_wrapper.TCorsikaReader_HandleSubBlock(self, sb)

    def HandleParticleBlock(self, p):
        return _coast_wrapper.TCorsikaReader_HandleParticleBlock(self, p)

    def HandleLongitudinalBlock(self, s):
        return _coast_wrapper.TCorsikaReader_HandleLongitudinalBlock(self, s)

    def HandleEventStart(self, arg2):
        return _coast_wrapper.TCorsikaReader_HandleEventStart(self, arg2)

    def HandleEventEnd(self, arg2):
        return _coast_wrapper.TCorsikaReader_HandleEventEnd(self, arg2)

    def HandleRunStart(self, arg2):
        return _coast_wrapper.TCorsikaReader_HandleRunStart(self, arg2)

    def HandleRunEnd(self, arg2):
        return _coast_wrapper.TCorsikaReader_HandleRunEnd(self, arg2)

    def HandleParticle(self, p):
        return _coast_wrapper.TCorsikaReader_HandleParticle(self, p)

    def HandleCherenkov(self, c):
        return _coast_wrapper.TCorsikaReader_HandleCherenkov(self, c)

    def HandleMuonProductionInfo(self, m):
        return _coast_wrapper.TCorsikaReader_HandleMuonProductionInfo(self, m)

    def Init(self):
        return _coast_wrapper.TCorsikaReader_Init(self)

    def Exit(self):
        return _coast_wrapper.TCorsikaReader_Exit(self)

    def SetThinning(self, t):
        return _coast_wrapper.TCorsikaReader_SetThinning(self, t)

    def SetParticleDataSize(self, s):
        return _coast_wrapper.TCorsikaReader_SetParticleDataSize(self, s)

    def SetBlockSize(self, s):
        return _coast_wrapper.TCorsikaReader_SetBlockSize(self, s)

    def SetNBlockSizeInfo(self, a):
        return _coast_wrapper.TCorsikaReader_SetNBlockSizeInfo(self, a)

    def SetVerboseLevel(self, v):
        return _coast_wrapper.TCorsikaReader_SetVerboseLevel(self, v)

    def SetInputFileName(self, fname):
        return _coast_wrapper.TCorsikaReader_SetInputFileName(self, fname)

    def GetThinning(self):
        return _coast_wrapper.TCorsikaReader_GetThinning(self)

    def GetParticleDataSize(self):
        return _coast_wrapper.TCorsikaReader_GetParticleDataSize(self)

    def GetBlockSize(self):
        return _coast_wrapper.TCorsikaReader_GetBlockSize(self)

    def GetNBlockSizeInfo(self):
        return _coast_wrapper.TCorsikaReader_GetNBlockSizeInfo(self)

    def GetVerboseLevel(self):
        return _coast_wrapper.TCorsikaReader_GetVerboseLevel(self)

    def GetInputFileName(self):
        return _coast_wrapper.TCorsikaReader_GetInputFileName(self)

# Register TCorsikaReader in _coast_wrapper:
_coast_wrapper.TCorsikaReader_swigregister(TCorsikaReader)

class MCorsikaReader(TCorsikaReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename, verbose=0):
        _coast_wrapper.MCorsikaReader_swiginit(self, _coast_wrapper.new_MCorsikaReader(filename, verbose))

    def GetRun(self, run):
        return _coast_wrapper.MCorsikaReader_GetRun(self, run)

    def GetShower(self, shower):
        return _coast_wrapper.MCorsikaReader_GetShower(self, shower)

    def GetData(self, data):
        return _coast_wrapper.MCorsikaReader_GetData(self, data)

    def GetShowerSummary(self, summary):
        return _coast_wrapper.MCorsikaReader_GetShowerSummary(self, summary)
    __swig_destroy__ = _coast_wrapper.delete_MCorsikaReader

# Register MCorsikaReader in _coast_wrapper:
_coast_wrapper.MCorsikaReader_swigregister(MCorsikaReader)

class TSubBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eRUNH = _coast_wrapper.TSubBlock_eRUNH
    eEVTH = _coast_wrapper.TSubBlock_eEVTH
    ePARTDATA = _coast_wrapper.TSubBlock_ePARTDATA
    eLONG = _coast_wrapper.TSubBlock_eLONG
    eEVTE = _coast_wrapper.TSubBlock_eEVTE
    eRUNE = _coast_wrapper.TSubBlock_eRUNE
    eNODATA = _coast_wrapper.TSubBlock_eNODATA
    eUNKNOWN = _coast_wrapper.TSubBlock_eUNKNOWN

    def __init__(self, *args):
        _coast_wrapper.TSubBlock_swiginit(self, _coast_wrapper.new_TSubBlock(*args))
    __swig_destroy__ = _coast_wrapper.delete_TSubBlock

    def GetBlockType(self):
        return _coast_wrapper.TSubBlock_GetBlockType(self)

    def GetBlockTypeName(self):
        return _coast_wrapper.TSubBlock_GetBlockTypeName(self)

    def IsThinned(self):
        return _coast_wrapper.TSubBlock_IsThinned(self)

    def GetData(self):
        return _coast_wrapper.TSubBlock_GetData(self)

    def FindBlockType(self):
        return _coast_wrapper.TSubBlock_FindBlockType(self)

# Register TSubBlock in _coast_wrapper:
_coast_wrapper.TSubBlock_swigregister(TSubBlock)

class MRunHeader(TSubBlock):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.MRunHeader_swiginit(self, _coast_wrapper.new_MRunHeader(*args))
    __swig_destroy__ = _coast_wrapper.delete_MRunHeader

    def GetRunID(self):
        return _coast_wrapper.MRunHeader_GetRunID(self)

    def GetDateStart(self):
        return _coast_wrapper.MRunHeader_GetDateStart(self)

    def GetVersion(self):
        return _coast_wrapper.MRunHeader_GetVersion(self)

    def GetNObservationLevels(self):
        return _coast_wrapper.MRunHeader_GetNObservationLevels(self)

    def GetObservationHeight(self, index):
        return _coast_wrapper.MRunHeader_GetObservationHeight(self, index)

    def GetSpectralSlope(self):
        return _coast_wrapper.MRunHeader_GetSpectralSlope(self)

    def GetEMin(self):
        return _coast_wrapper.MRunHeader_GetEMin(self)

    def GetEMax(self):
        return _coast_wrapper.MRunHeader_GetEMax(self)

    def GetFlagEGS4(self):
        return _coast_wrapper.MRunHeader_GetFlagEGS4(self)

    def GetFlagNKG(self):
        return _coast_wrapper.MRunHeader_GetFlagNKG(self)

    def GetCutoffHadrons(self):
        return _coast_wrapper.MRunHeader_GetCutoffHadrons(self)

    def GetCutoffMuons(self):
        return _coast_wrapper.MRunHeader_GetCutoffMuons(self)

    def GetCutoffElectrons(self):
        return _coast_wrapper.MRunHeader_GetCutoffElectrons(self)

    def GetCutoffPhotons(self):
        return _coast_wrapper.MRunHeader_GetCutoffPhotons(self)

    def GetSamplingPlanePointX(self):
        return _coast_wrapper.MRunHeader_GetSamplingPlanePointX(self)

    def GetSamplingPlanePointY(self):
        return _coast_wrapper.MRunHeader_GetSamplingPlanePointY(self)

    def GetSamplingPlanePointZ(self):
        return _coast_wrapper.MRunHeader_GetSamplingPlanePointZ(self)

    def GetSamplingPlaneNormalX(self):
        return _coast_wrapper.MRunHeader_GetSamplingPlaneNormalX(self)

    def GetSamplingPlaneNormalY(self):
        return _coast_wrapper.MRunHeader_GetSamplingPlaneNormalY(self)

    def GetSamplingPlaneNormalZ(self):
        return _coast_wrapper.MRunHeader_GetSamplingPlaneNormalZ(self)

    def GetAtmosphereLayerBoundary(self, index):
        return _coast_wrapper.MRunHeader_GetAtmosphereLayerBoundary(self, index)

    def GetAtmosphereA(self, index):
        return _coast_wrapper.MRunHeader_GetAtmosphereA(self, index)

    def GetAtmosphereB(self, index):
        return _coast_wrapper.MRunHeader_GetAtmosphereB(self, index)

    def GetAtmosphereC(self, index):
        return _coast_wrapper.MRunHeader_GetAtmosphereC(self, index)

    def GetConstNFLAIN(self):
        return _coast_wrapper.MRunHeader_GetConstNFLAIN(self)

    def GetConstNFLDIF(self):
        return _coast_wrapper.MRunHeader_GetConstNFLDIF(self)

    def GetConstNFLPI0(self):
        return _coast_wrapper.MRunHeader_GetConstNFLPI0(self)

    def GetConstNFLPIF(self):
        return _coast_wrapper.MRunHeader_GetConstNFLPIF(self)

    def GetConstNFLCHE(self):
        return _coast_wrapper.MRunHeader_GetConstNFLCHE(self)

    def GetConstNFRAGM(self):
        return _coast_wrapper.MRunHeader_GetConstNFRAGM(self)

# Register MRunHeader in _coast_wrapper:
_coast_wrapper.MRunHeader_swigregister(MRunHeader)

class MEventHeader(TSubBlock):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.MEventHeader_swiginit(self, _coast_wrapper.new_MEventHeader(*args))
    __swig_destroy__ = _coast_wrapper.delete_MEventHeader

    def GetEventNumber(self):
        return _coast_wrapper.MEventHeader_GetEventNumber(self)

    def GetParticleId(self):
        return _coast_wrapper.MEventHeader_GetParticleId(self)

    def GetEnergy(self):
        return _coast_wrapper.MEventHeader_GetEnergy(self)

    def GetStartingAltitude(self):
        return _coast_wrapper.MEventHeader_GetStartingAltitude(self)

    def GetFirstTarget(self):
        return _coast_wrapper.MEventHeader_GetFirstTarget(self)

    def GetZFirst(self):
        return _coast_wrapper.MEventHeader_GetZFirst(self)

    def GetPx(self):
        return _coast_wrapper.MEventHeader_GetPx(self)

    def GetPy(self):
        return _coast_wrapper.MEventHeader_GetPy(self)

    def GetPz(self):
        return _coast_wrapper.MEventHeader_GetPz(self)

    def GetTheta(self):
        return _coast_wrapper.MEventHeader_GetTheta(self)

    def GetPhi(self):
        return _coast_wrapper.MEventHeader_GetPhi(self)

    def GetNRandomSequences(self):
        return _coast_wrapper.MEventHeader_GetNRandomSequences(self)

    def GetSeed(self, index):
        return _coast_wrapper.MEventHeader_GetSeed(self, index)

    def GetInitialCallsMod(self, index):
        return _coast_wrapper.MEventHeader_GetInitialCallsMod(self, index)

    def GetInitialCallsDiv(self, index):
        return _coast_wrapper.MEventHeader_GetInitialCallsDiv(self, index)

    def GetRunNumber(self):
        return _coast_wrapper.MEventHeader_GetRunNumber(self)

    def GetDateStart(self):
        return _coast_wrapper.MEventHeader_GetDateStart(self)

    def GetVersion(self):
        return _coast_wrapper.MEventHeader_GetVersion(self)

    def GetNObservationLevels(self):
        return _coast_wrapper.MEventHeader_GetNObservationLevels(self)

    def GetObservationHeight(self, index):
        return _coast_wrapper.MEventHeader_GetObservationHeight(self, index)

    def GetSpectralSlope(self):
        return _coast_wrapper.MEventHeader_GetSpectralSlope(self)

    def GetEMin(self):
        return _coast_wrapper.MEventHeader_GetEMin(self)

    def GetEMax(self):
        return _coast_wrapper.MEventHeader_GetEMax(self)

    def GetCutoffHadrons(self):
        return _coast_wrapper.MEventHeader_GetCutoffHadrons(self)

    def GetCutoffMuons(self):
        return _coast_wrapper.MEventHeader_GetCutoffMuons(self)

    def GetCutoffElectrons(self):
        return _coast_wrapper.MEventHeader_GetCutoffElectrons(self)

    def GetCutoffPhotons(self):
        return _coast_wrapper.MEventHeader_GetCutoffPhotons(self)

    def GetNFLAIN(self):
        return _coast_wrapper.MEventHeader_GetNFLAIN(self)

    def GetNFLDIF(self):
        return _coast_wrapper.MEventHeader_GetNFLDIF(self)

    def GetNFLPI0(self):
        return _coast_wrapper.MEventHeader_GetNFLPI0(self)

    def GetNFLPIF(self):
        return _coast_wrapper.MEventHeader_GetNFLPIF(self)

    def GetNFLCHE(self):
        return _coast_wrapper.MEventHeader_GetNFLCHE(self)

    def GetNFRAGM(self):
        return _coast_wrapper.MEventHeader_GetNFRAGM(self)

    def GetBx(self):
        return _coast_wrapper.MEventHeader_GetBx(self)

    def GetBz(self):
        return _coast_wrapper.MEventHeader_GetBz(self)

    def GetFlagEGS4(self):
        return _coast_wrapper.MEventHeader_GetFlagEGS4(self)

    def GetFlagNKG(self):
        return _coast_wrapper.MEventHeader_GetFlagNKG(self)

    def GetHadronicLowEModell(self):
        return _coast_wrapper.MEventHeader_GetHadronicLowEModell(self)

    def GetHadronicHighEModell(self):
        return _coast_wrapper.MEventHeader_GetHadronicHighEModell(self)

    def GetFlagCherenkov(self):
        return _coast_wrapper.MEventHeader_GetFlagCherenkov(self)

    def GetFlagNeutrino(self):
        return _coast_wrapper.MEventHeader_GetFlagNeutrino(self)

    def GetFlagCurved(self):
        return _coast_wrapper.MEventHeader_GetFlagCurved(self)

    def GetFlagComputer(self):
        return _coast_wrapper.MEventHeader_GetFlagComputer(self)

    def GetThetaMin(self):
        return _coast_wrapper.MEventHeader_GetThetaMin(self)

    def GetThetaMax(self):
        return _coast_wrapper.MEventHeader_GetThetaMax(self)

    def GetPhiMin(self):
        return _coast_wrapper.MEventHeader_GetPhiMin(self)

    def GetPhiMax(self):
        return _coast_wrapper.MEventHeader_GetPhiMax(self)

    def GetCherenkovBunch(self):
        return _coast_wrapper.MEventHeader_GetCherenkovBunch(self)

    def GetCherenkovNumberX(self):
        return _coast_wrapper.MEventHeader_GetCherenkovNumberX(self)

    def GetCherenkovNumberY(self):
        return _coast_wrapper.MEventHeader_GetCherenkovNumberY(self)

    def GetCherenkovGridX(self):
        return _coast_wrapper.MEventHeader_GetCherenkovGridX(self)

    def GetCherenkovGridY(self):
        return _coast_wrapper.MEventHeader_GetCherenkovGridY(self)

    def GetCherenkovDetectorX(self):
        return _coast_wrapper.MEventHeader_GetCherenkovDetectorX(self)

    def GetCherenkovDetectorY(self):
        return _coast_wrapper.MEventHeader_GetCherenkovDetectorY(self)

    def GetCherenkovOutputFlag(self):
        return _coast_wrapper.MEventHeader_GetCherenkovOutputFlag(self)

    def GetArrayRotation(self):
        return _coast_wrapper.MEventHeader_GetArrayRotation(self)

    def GetFlagExtraMuonInformation(self):
        return _coast_wrapper.MEventHeader_GetFlagExtraMuonInformation(self)

    def GetMultipleScatteringStep(self):
        return _coast_wrapper.MEventHeader_GetMultipleScatteringStep(self)

    def GetCherenkovBandwidthMin(self):
        return _coast_wrapper.MEventHeader_GetCherenkovBandwidthMin(self)

    def GetCherenkovBandwidthMax(self):
        return _coast_wrapper.MEventHeader_GetCherenkovBandwidthMax(self)

    def GetNUsesOfEvent(self):
        return _coast_wrapper.MEventHeader_GetNUsesOfEvent(self)

    def GetCherenkovCoreX(self, index):
        return _coast_wrapper.MEventHeader_GetCherenkovCoreX(self, index)

    def GetCherenkovCoreY(self, index):
        return _coast_wrapper.MEventHeader_GetCherenkovCoreY(self, index)

    def GetFlagSIBYLL(self):
        return _coast_wrapper.MEventHeader_GetFlagSIBYLL(self)

    def GetFlagSIBYLLCross(self):
        return _coast_wrapper.MEventHeader_GetFlagSIBYLLCross(self)

    def GetFlagQGSJET(self):
        return _coast_wrapper.MEventHeader_GetFlagQGSJET(self)

    def GetFlagQGSJETCross(self):
        return _coast_wrapper.MEventHeader_GetFlagQGSJETCross(self)

    def GetFlagDPMJET(self):
        return _coast_wrapper.MEventHeader_GetFlagDPMJET(self)

    def GetFlagDPMJETCross(self):
        return _coast_wrapper.MEventHeader_GetFlagDPMJETCross(self)

    def GetFlagVENUSCross(self):
        return _coast_wrapper.MEventHeader_GetFlagVENUSCross(self)

    def GetFlagMuonMultiple(self):
        return _coast_wrapper.MEventHeader_GetFlagMuonMultiple(self)

    def GetNKGRadialRange(self):
        return _coast_wrapper.MEventHeader_GetNKGRadialRange(self)

    def GetEFractionThinningH(self):
        return _coast_wrapper.MEventHeader_GetEFractionThinningH(self)

    def GetEFractionThinningEM(self):
        return _coast_wrapper.MEventHeader_GetEFractionThinningEM(self)

    def GetWMaxHadronic(self):
        return _coast_wrapper.MEventHeader_GetWMaxHadronic(self)

    def GetWMaxEM(self):
        return _coast_wrapper.MEventHeader_GetWMaxEM(self)

    def GetRMaxThinning(self):
        return _coast_wrapper.MEventHeader_GetRMaxThinning(self)

    def GetInnerAngle(self):
        return _coast_wrapper.MEventHeader_GetInnerAngle(self)

    def GetOuterAngle(self):
        return _coast_wrapper.MEventHeader_GetOuterAngle(self)

    def GetTransitionEnergy(self):
        return _coast_wrapper.MEventHeader_GetTransitionEnergy(self)

    def GetSkimmingIncidence(self):
        return _coast_wrapper.MEventHeader_GetSkimmingIncidence(self)

    def GetSkimmingAltitude(self):
        return _coast_wrapper.MEventHeader_GetSkimmingAltitude(self)

    def GetStartingHeight(self):
        return _coast_wrapper.MEventHeader_GetStartingHeight(self)

# Register MEventHeader in _coast_wrapper:
_coast_wrapper.MEventHeader_swigregister(MEventHeader)

class MEventEnd(TSubBlock):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.MEventEnd_swiginit(self, _coast_wrapper.new_MEventEnd(*args))
    __swig_destroy__ = _coast_wrapper.delete_MEventEnd

    def GetEventNumber(self):
        return _coast_wrapper.MEventEnd_GetEventNumber(self)

    def GetPhotons(self):
        return _coast_wrapper.MEventEnd_GetPhotons(self)

    def GetElectrons(self):
        return _coast_wrapper.MEventEnd_GetElectrons(self)

    def GetHadrons(self):
        return _coast_wrapper.MEventEnd_GetHadrons(self)

    def GetMuons(self):
        return _coast_wrapper.MEventEnd_GetMuons(self)

    def GetParticles(self):
        return _coast_wrapper.MEventEnd_GetParticles(self)

    def GetNmax(self):
        return _coast_wrapper.MEventEnd_GetNmax(self)

    def GetX0(self):
        return _coast_wrapper.MEventEnd_GetX0(self)

    def GetXmax(self):
        return _coast_wrapper.MEventEnd_GetXmax(self)

    def GetLongi_a(self):
        return _coast_wrapper.MEventEnd_GetLongi_a(self)

    def GetLongi_b(self):
        return _coast_wrapper.MEventEnd_GetLongi_b(self)

    def GetLongi_c(self):
        return _coast_wrapper.MEventEnd_GetLongi_c(self)

    def GetLongi_Chi2(self):
        return _coast_wrapper.MEventEnd_GetLongi_Chi2(self)

    def GetWeightedPhotons(self):
        return _coast_wrapper.MEventEnd_GetWeightedPhotons(self)

    def GetWeightedElectrons(self):
        return _coast_wrapper.MEventEnd_GetWeightedElectrons(self)

    def GetWeightedHadrons(self):
        return _coast_wrapper.MEventEnd_GetWeightedHadrons(self)

    def GetWeightedMuons(self):
        return _coast_wrapper.MEventEnd_GetWeightedMuons(self)

    def GetNPreshower(self):
        return _coast_wrapper.MEventEnd_GetNPreshower(self)

# Register MEventEnd in _coast_wrapper:
_coast_wrapper.MEventEnd_swigregister(MEventEnd)

eParticle = _coast_wrapper.eParticle
eNucleus = _coast_wrapper.eNucleus
eCherenkov = _coast_wrapper.eCherenkov
eMuonProductionInfo = _coast_wrapper.eMuonProductionInfo
eEmpty = _coast_wrapper.eEmpty
eUnknown = _coast_wrapper.eUnknown
class TParticleBlockEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.TParticleBlockEntry_swiginit(self, _coast_wrapper.new_TParticleBlockEntry(*args))
    __swig_destroy__ = _coast_wrapper.delete_TParticleBlockEntry

    def GetParticleID(self):
        return _coast_wrapper.TParticleBlockEntry_GetParticleID(self)

    def Dump(self):
        return _coast_wrapper.TParticleBlockEntry_Dump(self)

    def IsParticle(self):
        return _coast_wrapper.TParticleBlockEntry_IsParticle(self)

    def IsNucleus(self):
        return _coast_wrapper.TParticleBlockEntry_IsNucleus(self)

    def IsCherenkov(self):
        return _coast_wrapper.TParticleBlockEntry_IsCherenkov(self)

    def IsMuonProductionInfo(self):
        return _coast_wrapper.TParticleBlockEntry_IsMuonProductionInfo(self)

    def IsEmpty(self):
        return _coast_wrapper.TParticleBlockEntry_IsEmpty(self)

    def GetType(self):
        return _coast_wrapper.TParticleBlockEntry_GetType(self)

    def GetParticleName(self):
        return _coast_wrapper.TParticleBlockEntry_GetParticleName(self)

# Register TParticleBlockEntry in _coast_wrapper:
_coast_wrapper.TParticleBlockEntry_swigregister(TParticleBlockEntry)

class MLongitudinalBlock(TSubBlock):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.MLongitudinalBlock_swiginit(self, _coast_wrapper.new_MLongitudinalBlock(*args))
    __swig_destroy__ = _coast_wrapper.delete_MLongitudinalBlock

    def GetNSteps(self):
        return _coast_wrapper.MLongitudinalBlock_GetNSteps(self)

    def GetNLongBlocks(self):
        return _coast_wrapper.MLongitudinalBlock_GetNLongBlocks(self)

    def GetBlockNumber(self):
        return _coast_wrapper.MLongitudinalBlock_GetBlockNumber(self)

    def FirstLongitudinal(self):
        return _coast_wrapper.MLongitudinalBlock_FirstLongitudinal(self)

    def LastLongitudinal(self):
        return _coast_wrapper.MLongitudinalBlock_LastLongitudinal(self)

# Register MLongitudinalBlock in _coast_wrapper:
_coast_wrapper.MLongitudinalBlock_swigregister(MLongitudinalBlock)

class IParticleReadout(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coast_wrapper.delete_IParticleReadout

    def GetObservationLevel(self):
        return _coast_wrapper.IParticleReadout_GetObservationLevel(self)

    def GetHadronicGeneration(self):
        return _coast_wrapper.IParticleReadout_GetHadronicGeneration(self)

    def GetPx(self):
        return _coast_wrapper.IParticleReadout_GetPx(self)

    def GetPy(self):
        return _coast_wrapper.IParticleReadout_GetPy(self)

    def GetPz(self):
        return _coast_wrapper.IParticleReadout_GetPz(self)

    def GetX(self):
        return _coast_wrapper.IParticleReadout_GetX(self)

    def GetY(self):
        return _coast_wrapper.IParticleReadout_GetY(self)

    def GetTime(self):
        return _coast_wrapper.IParticleReadout_GetTime(self)

    def GetWeight(self):
        return _coast_wrapper.IParticleReadout_GetWeight(self)

    def GetMass(self):
        return _coast_wrapper.IParticleReadout_GetMass(self)

    def GetPDGCode(self):
        return _coast_wrapper.IParticleReadout_GetPDGCode(self)

    def GetKinEnergy(self):
        return _coast_wrapper.IParticleReadout_GetKinEnergy(self)

    def GetTheta(self):
        return _coast_wrapper.IParticleReadout_GetTheta(self)

# Register IParticleReadout in _coast_wrapper:
_coast_wrapper.IParticleReadout_swigregister(IParticleReadout)

class MParticle(TParticleBlockEntry, IParticleReadout):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coast_wrapper.MParticle_swiginit(self, _coast_wrapper.new_MParticle(*args))

    def Dump(self):
        return _coast_wrapper.MParticle_Dump(self)

    def GetWeight(self):
        return _coast_wrapper.MParticle_GetWeight(self)

    def GetParticleName(self):
        return _coast_wrapper.MParticle_GetParticleName(self)
    __swig_destroy__ = _coast_wrapper.delete_MParticle

# Register MParticle in _coast_wrapper:
_coast_wrapper.MParticle_swigregister(MParticle)


def __lshift__(o, p):
    return _coast_wrapper.__lshift__(o, p)
class ParticleCoordsList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coast_wrapper.ParticleCoordsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coast_wrapper.ParticleCoordsList___nonzero__(self)

    def __bool__(self):
        return _coast_wrapper.ParticleCoordsList___bool__(self)

    def __len__(self):
        return _coast_wrapper.ParticleCoordsList___len__(self)

    def __getslice__(self, i, j):
        return _coast_wrapper.ParticleCoordsList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coast_wrapper.ParticleCoordsList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coast_wrapper.ParticleCoordsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coast_wrapper.ParticleCoordsList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coast_wrapper.ParticleCoordsList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coast_wrapper.ParticleCoordsList___setitem__(self, *args)

    def pop(self):
        return _coast_wrapper.ParticleCoordsList_pop(self)

    def append(self, x):
        return _coast_wrapper.ParticleCoordsList_append(self, x)

    def empty(self):
        return _coast_wrapper.ParticleCoordsList_empty(self)

    def size(self):
        return _coast_wrapper.ParticleCoordsList_size(self)

    def swap(self, v):
        return _coast_wrapper.ParticleCoordsList_swap(self, v)

    def begin(self):
        return _coast_wrapper.ParticleCoordsList_begin(self)

    def end(self):
        return _coast_wrapper.ParticleCoordsList_end(self)

    def rbegin(self):
        return _coast_wrapper.ParticleCoordsList_rbegin(self)

    def rend(self):
        return _coast_wrapper.ParticleCoordsList_rend(self)

    def clear(self):
        return _coast_wrapper.ParticleCoordsList_clear(self)

    def get_allocator(self):
        return _coast_wrapper.ParticleCoordsList_get_allocator(self)

    def pop_back(self):
        return _coast_wrapper.ParticleCoordsList_pop_back(self)

    def erase(self, *args):
        return _coast_wrapper.ParticleCoordsList_erase(self, *args)

    def __init__(self, *args):
        _coast_wrapper.ParticleCoordsList_swiginit(self, _coast_wrapper.new_ParticleCoordsList(*args))

    def push_back(self, x):
        return _coast_wrapper.ParticleCoordsList_push_back(self, x)

    def front(self):
        return _coast_wrapper.ParticleCoordsList_front(self)

    def back(self):
        return _coast_wrapper.ParticleCoordsList_back(self)

    def assign(self, n, x):
        return _coast_wrapper.ParticleCoordsList_assign(self, n, x)

    def resize(self, *args):
        return _coast_wrapper.ParticleCoordsList_resize(self, *args)

    def insert(self, *args):
        return _coast_wrapper.ParticleCoordsList_insert(self, *args)

    def reserve(self, n):
        return _coast_wrapper.ParticleCoordsList_reserve(self, n)

    def capacity(self):
        return _coast_wrapper.ParticleCoordsList_capacity(self)
    __swig_destroy__ = _coast_wrapper.delete_ParticleCoordsList

# Register ParticleCoordsList in _coast_wrapper:
_coast_wrapper.ParticleCoordsList_swigregister(ParticleCoordsList)

class ParticleCoords(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_coast_wrapper.ParticleCoords_type_get, _coast_wrapper.ParticleCoords_type_set)
    x = property(_coast_wrapper.ParticleCoords_x_get, _coast_wrapper.ParticleCoords_x_set)
    y = property(_coast_wrapper.ParticleCoords_y_get, _coast_wrapper.ParticleCoords_y_set)

    def __init__(self):
        _coast_wrapper.ParticleCoords_swiginit(self, _coast_wrapper.new_ParticleCoords())
    __swig_destroy__ = _coast_wrapper.delete_ParticleCoords

# Register ParticleCoords in _coast_wrapper:
_coast_wrapper.ParticleCoords_swigregister(ParticleCoords)


def getParticleCoordsList(Data):
    return _coast_wrapper.getParticleCoordsList(Data)


